<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://richardtao.github.io</id>
    <title>Gridea</title>
    <updated>2020-03-25T10:51:05.793Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://richardtao.github.io"/>
    <link rel="self" href="https://richardtao.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://richardtao.github.io/images/avatar.png</logo>
    <icon>https://richardtao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Python-String]]></title>
        <id>https://richardtao.github.io/post/python-string/</id>
        <link href="https://richardtao.github.io/post/python-string/">
        </link>
        <updated>2020-03-25T10:48:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="字符串的相关方法">字符串的相关方法</h1>
<h2 id="11-判断类型方法">1.1 判断类型方法</h2>
<h3 id="111-基本不需要太多记忆">1.1.1 基本：不需要太多记忆</h3>
<pre><code class="language-python">print('abc'.isalpha())  # 只包含英文字母
print('ABcd22'.isalnum())  # 只包含字母以及数字
print('     \t\n'.isspace())  #只包含空格
print('The World Is Wrong'.istitle())  # 判断是否为标题化的(每个单词的首字母大写)
print('the world'.islower())  # 字符都是小写
print('the world'.isupper())  # 字符都是大写
</code></pre>
<pre><code>True
True
True
True
True
False
</code></pre>
<h3 id="112-三个方法区分">1.1.2 三个方法区分</h3>
<blockquote>
<p>特点：1.都不能判断小数； 2.<code>isdigit()</code>可以判断<code>⑴</code>、<code>\u00b2</code>；  3.<code>isnumeric()</code>在2之上还能够判断中文数字</p>
</blockquote>
<pre><code class="language-python">str1 = '123'
str2 = '\u00b2'
str3 = '一千零一'

print(str1.isdecimal(), str1.isdigit(), str1.isnumeric())
print(str2.isdecimal(), str2.isdigit(), str2.isnumeric())
print(str3.isdecimal(), str3.isdigit(), str3.isnumeric())
</code></pre>
<pre><code>True True True
False True True
False False True
</code></pre>
<h2 id="12-查找和替换方法">1.2 查找和替换方法</h2>
<pre><code class="language-python">str = 'I tell you'
print(str.startswith('I'))   #  string.startswith(str):检查字符串是否是以 str 开头
print(str.endswith('ou')) #  检查字符串是否是以 str 结束,注意是ends
</code></pre>
<pre><code>True
True
</code></pre>
<h3 id="121-查找方法">1.2.1 查找方法</h3>
<blockquote>
<p><code>find(str,start,end)</code>:  检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></p>
</blockquote>
<pre><code class="language-python">str = 'A land where the strong make the rules and weak have to obey'
print(str.find('land',0,len(str)))
</code></pre>
<pre><code>2
</code></pre>
<h3 id="122-替换方法">1.2.2 替换方法</h3>
<blockquote>
<p><code>string.replace(old_str, new_str, num=string.count(old))</code>:   把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</p>
</blockquote>
<blockquote>
<p>注意：  该方法不会修改原有的字符串，而是返回一个新的字符串</p>
</blockquote>
<pre><code class="language-python">str = 'A land where the strong make the rules and weak have to obey'
print(str.replace('e','*',3))
</code></pre>
<pre><code>A land wh*r* th* strong make the rules and weak have to obey
</code></pre>
<pre><code class="language-python"># 易水送别
# [唐] 骆宾王
# 此地别燕丹，壮士发冲冠。
# 昔时人已没，今日水犹寒。

poem_list = ['易水送别','骆宾王','此地别燕丹，','壮士发冲冠。','昔时人已没，','今日水犹寒。']

for poem in poem_list:
    
    print('|%s|' % poem.center(20,&quot; &quot;))   # 居中对齐
</code></pre>
<pre><code>|        易水送别        |
|        骆宾王         |
|       此地别燕丹，       |
|       壮士发冲冠。       |
|       昔时人已没，       |
|       今日水犹寒。       |
</code></pre>
<h3 id="123-分片和合并">1.2.3 分片和合并</h3>
<blockquote>
<p><code>split()</code>:  以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 '\r', '\t', '\n' 和空格 <br /><br>
<code>sep.join()</code>:  以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串;  注意：调用函数的是分隔符,形参是要合并的对象; 并且它不改变原有的字符串，会返回一个新的字符串作为结果</p>
</blockquote>
<pre><code class="language-python">str = 'A land where the strong make the rules and weak have to obey'
str = str.split()
print(str)

res = '*'.join(str)
print(res)
</code></pre>
<pre><code>['A', 'land', 'where', 'the', 'strong', 'make', 'the', 'rules', 'and', 'weak', 'have', 'to', 'obey']
A*land*where*the*strong*make*the*rules*and*weak*have*to*obey
</code></pre>
<h3 id="124-切片倒序切片">1.2.4 切片&amp;倒序切片</h3>
<blockquote>
<p><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong></p>
</blockquote>
<p>使用形式：<code>字符串[开始索引:结束索引:步长]</code></p>
<ol>
<li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引, 结束索引)</code> =&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code>
<ul>
<li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li>
</ul>
</li>
<li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li>
<li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li>
<li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li>
</ol>
<ul>
<li>
<ol>
<li>截取从 2 ~ 5 位置 的字符串</li>
</ol>
</li>
<li>
<ol start="2">
<li>截取从 2 ~ <code>末尾</code> 的字符串</li>
</ol>
</li>
<li>
<ol start="3">
<li>截取从 <code>开始</code> ~ 5 位置 的字符串</li>
</ol>
</li>
<li>
<ol start="4">
<li>截取完整的字符串</li>
</ol>
</li>
<li>
<ol start="5">
<li>从开始位置，每隔一个字符截取字符串</li>
</ol>
</li>
<li>
<ol start="6">
<li>从索引 1 开始，每隔一个取一个</li>
</ol>
</li>
<li>
<ol start="7">
<li>截取从 2 ~ <code>末尾 - 1</code> 的字符串</li>
</ol>
</li>
<li>
<ol start="8">
<li>截取字符串末尾两个字符</li>
</ol>
</li>
<li>
<ol start="9">
<li>字符串的逆序（面试题）</li>
</ol>
</li>
</ul>
<pre><code class="language-python">str = '0123456789'

# 1.截取从 2 ~ 5 位置 的字符串
print(str[2:6])

# 2. 截取从 2 ~ `末尾` 的字符串
print(str[2:])

# 3. 截取从 `开始` ~ 5 位置 的字符串
print(str[:6])

# 4. 截取完整的字符串
print(str[:])

# 5. 从开始位置，每隔一个字符截取字符串
print(str[::2])

# 6. 从索引 1 开始，每隔一个取一个
print(str[1::2])

# 7. 截取从 2 ~ `末尾 - 1` 的字符串
print(str[2:-1])

# 8. 截取字符串末尾两个字符
print(str[-2:])

# 9. 字符串的逆序（面试题）
print(str[::-1])
</code></pre>
<pre><code>2345
23456789
012345
0123456789
02468
13579
2345678
89
9876543210
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://richardtao.github.io/post/hello-gridea/</id>
        <link href="https://richardtao.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>